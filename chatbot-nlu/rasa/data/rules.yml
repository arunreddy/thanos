version: "3.1"

rules:
  - rule: Say goodbye anytime the user says goodbye
    steps:
      - intent: goodbye
      - action: utter_goodbye

  - rule: Say hello anytime the user says hello
    steps:
      - intent: greet
      - action: utter_greet

  # ─── catch fallback inside select form ───
  - rule: nlu fallback in select form
    condition:
      - active_loop: recommend_database_form
    steps:
      - intent: nlu_fallback
      - action: action_listen

  # ─── catch fallback inside create form ───
  - rule: nlu fallback in create form
    condition:
      - active_loop: create_database_form
    steps:
      - intent: nlu_fallback
      - action: action_listen

  # ─── catch fallback inside delete form ───
  - rule: nlu fallback in delete form
    condition:
      - active_loop: delete_database_form
    steps:
      - intent: nlu_fallback
      - action: action_listen

  # ─── global nlu fallback when no form is active ───
  - rule: global nlu fallback
    condition:
      - active_loop: null
    steps:
      - intent: nlu_fallback
      - action: utter_oos

  # ─── global out_of_scope fallback when no form is active ───
  - rule: global out_of_scope fallback
    condition:
      - active_loop: null
    steps:
      - intent: out_of_scope
      - action: utter_oos

  # ─── guarded restart ───
  - rule: Restart the conversation
    condition:
      - active_loop: null
    steps:
      - intent: restart
      - action: action_restart

  - rule: Interrupt with help and resume flow
    condition:
      - active_loop: null
    steps:
      - intent: help
      - action: utter_help

  - rule: Help website flow
    condition:
      - active_loop: null
    steps:
      - intent: help_website
      - action: utter_help_website

# ——— recommend database form ———
  # - rule: Activate recommend database form
  #   steps:
  #     - intent: recommend_database
  #     - action: recommend_database_form
  #     - active_loop: recommend_database_form

  # - rule: Handle confirmation of database selection
  #   condition:
  #     - active_loop: null
  #   steps:
  #     - intent: confirm_database_selection
  #     - action: action_recommend_database_create_ticket

  # - rule: Submit select database form
  #   condition:
  #     - active_loop: recommend_database_form
  #     - slot_was_set:
  #         - downtime_tolerance
  #   steps:
  #     - action: recommend_database_form
  #     - active_loop: null
  #     - action: action_recommend_database
  #     - action: utter_database_selection_confirmation

  # ——— recommend database form ———
  - rule: Activate recommend database form
    steps:
      - intent: recommend_database
      - action: recommend_database_form
      - active_loop: recommend_database_form

  - rule: Handle confirmation of database selection
    condition:
      - active_loop: null
    steps:
      - intent: confirm_database_selection
      - action: action_recommend_database_create_ticket

  - rule: Submit select database form
    condition:
      - active_loop: recommend_database_form
      - slot_was_set:
          - vendor_recommended_db
    steps:
      - action: recommend_database_form
      - active_loop: null
      - action: action_recommend_database

# #schema explorer
#   - rule: Activate schema explorer flow
#     steps:
#       - intent: explore_schema
#       - action: utter_ask_explorer_support
#       - action: action_listen

#   - rule: User affirms schema explorer
#     steps:
#       - intent: affirm_schema_explorer
#       - action: schema_explorer_form
#       - active_loop: schema_explorer_form

#   - rule: Submit connection string
#     condition:
#       - active_loop: schema_explorer_form
#       - slot_was_set:
#           - connection_string
#     steps:
#       - action: schema_explorer_form
#       - active_loop: null
#       - action: action_validate_connection_string

#   - rule: Valid connection string → list object types
#     condition:
#       - active_loop: null
#       - slot_was_set:
#           - connection_valid    # you should set this in your custom action
#     steps:
#       - action: action_list_object_types
#       - action: object_type_form
#       - active_loop: object_type_form

#   - rule: Submit object type form
#     condition:
#       - active_loop: object_type_form
#       - slot_was_set:
#           - object_type
#     steps:
#       - action: object_type_form
#       - active_loop: null
#       - action: action_get_schema



# ——— create‐database form ———
  # 1) when the user says “create_database” first warn that only Postgres is supported
  - rule: postgres support notice for create database
    steps:
      - intent: create_database
      - action: utter_postgresql_support
      - action: action_listen

  # 1a) if they click any unsupported type…
  - rule: unsupported database type selected
    steps:
      - intent: unsupported_db_type
      - action: utter_working_on_features
      - action: action_listen

  # 2) once they affirm, activate the create-database form
  - rule: activate create database form after support affirmation
    steps:
      - intent: affirm
      - action: create_database_form
      - active_loop: create_database_form

  # 3) when the form is filled (sysid set), ask for final confirmation
  - rule: submit create database form
    condition:
      - active_loop: create_database_form
      - slot_was_set:
          - sysid
    steps:
      - action: create_database_form
      - active_loop: null
      - action: utter_ask_confirm_database_creation
      - action: action_listen

  # 4) if they then affirm with all slots present, actually provision
  - rule: handle affirm for database creation
    condition:
      - active_loop: null
      - slot_was_set:
          - database_name
          - database_version
          - sysid
    steps:
      - intent: affirm
      - action: action_submit_database

  # 5) if they deny at that confirm screen, cancel creation
  - rule: handle deny for database creation
    condition:
      - active_loop: null
      - slot_was_set:
          - database_name
          - database_version
          - sysid
    steps:
      - intent: deny
      - action: utter_database_creation_cancelled

# ——— delete‐database form ———

# 1) when the user says “delete_database” first warn that only Postgres is supported
  - rule: postgres support notice for delete database
    steps:
      - intent: delete_database
      - action: utter_postgresql_support_delete
      - action: action_listen

# 1a) catch unsupported-DB clicks from that notice only
  - rule: activate delete database form after support affirmation
    steps:
      - intent: affirm_delete
      - action: delete_database_form
      - active_loop: delete_database_form

# 3) when the form is filled (sysid set), ask for final confirmation
  - rule: submit delete database form
    condition:
      - active_loop: delete_database_form
      - slot_was_set:
          - sysid
    steps:
      - action: delete_database_form
      - active_loop: null
      - action: utter_ask_confirm_database_deletion
      - action: action_listen

# 4) if they then affirm, actually delete
  - rule: handle affirm for database deletion
    condition:
      - active_loop: null
      - slot_was_set:
          - database_name
          - database_instance
          - sysid
    steps:
      - intent: affirm
      - action: action_submit_delete_database

# 5) if they deny, cancel deletion
  - rule: handle deny for database deletion
    condition:
      - active_loop: null
      - slot_was_set:
          - database_name
          - database_instance
          - sysid
    steps:
      - intent: deny
      - action: utter_database_creation_cancelled  # or create your own “cancelled delete” utter


# ——— explore‐schema flow ———

# 1) Prompt for supported DB type
  - rule: postgres support notice for exploring schema
    steps:
      - intent: explore_schema
      - action: utter_postgresql_support_schema
      - action: action_listen

# 1a) catch unsupported clicks
  - rule: unsupported database type selected during schema explore
    steps:
      - intent: unsupported_db_type
      - action: utter_working_on_features
      - action: action_listen

# 2) once they click PostgreSQL
  - rule: activate explore‐schema form after support affirmation
    steps:
      - intent: affirm_schema
      - action: explore_schema_form
      - active_loop: explore_schema_form

# 3) when the user has provided connection_string & object_types
  - rule: submit explore‐schema form
    condition:
      - active_loop: explore_schema_form
      - slot_was_set:
          - object_types
    steps:
      - action: explore_schema_form
      - active_loop: null
      - action: utter_ask_confirm_schema_explore
      - action: action_listen

# 4) on final "Yes"
  - rule: handle affirm for schema exploration
    condition:
      - active_loop: null
      - slot_was_set:
          - connection_string
          - object_types
    steps:
      - intent: affirm
      - action: action_submit_schema_explore  # First generate the file
      - action: action_fetch_available_objects        # Then provide download link
      - action: utter_ask_for_schema_selection  # New step: prompt for object selection

# 5) on final "No"
  - rule: handle deny for schema exploration
    condition:
      - active_loop: null
      - slot_was_set:
          - connection_string
          - object_types
    steps:
      - intent: deny
      - action: utter_cancel_schema_explore

# 6) Handle user providing schema selection for detailed definitions
  - rule: generate schema definitions when user provides selection
    condition:
      - slot_was_set:
          - connection_string
          - schema_file_path  # Make sure we've already done schema exploration
    steps:
      - intent: provide_schema_selection
      - action: action_fetch_object_definitions

# ——— analyze‐query flow ———

# 1) Initial prompt for database type support
  - rule: postgres support notice for analyzing query
    steps:
      - intent: analyze_query
      - action: utter_postgresql_support_query_analyzer
      - action: action_listen

# 2) When user confirms PostgreSQL, start the form
  - rule: activate analyze query form after PostgreSQL selection
    steps:
      - intent: affirm_query_analyzer
      - action: analyze_query_form
      - active_loop: analyze_query_form

# 3) Unsupported database type selected
  - rule: unsupported database type selected for query analyzer
    steps:
      - intent: unsupported_db_type
      - action: utter_working_on_features
      - action: action_listen

# 4) Submit analyze query form when all slots filled
  - rule: submit analyze query form
    condition:
      - active_loop: analyze_query_form
      - slot_was_set:
          - sql_query
    steps:
      - action: analyze_query_form
      - active_loop: null
      - action: utter_ask_confirm_query_analysis
      - action: action_listen

# 5) Handle user confirmation to proceed with analysis
  - rule: handle affirm for query analysis
    condition:
      - active_loop: null
      - slot_was_set:
          - connection_string  
          - sql_query
    steps:
      - intent: affirm
      - action: action_submit_query_analysis

# 6) Handle user declining to proceed with analysis
  - rule: handle deny for query analysis
    condition:
      - active_loop: null
      - slot_was_set:
          - connection_string 
          - sql_query
    steps:
      - intent: deny
      - action: utter_query_analysis_cancelled